---
title: "Supplementary Information - Paper Title"
format:
  html:
    fig-width: 15
    fig-height: 50
    toc: true
    toc-location: right
    toc-depth: 3
---

Authors: Isabella C. Richmond^1^\*, Kayleigh Hutt-Taylor^1,2^, Lauren Bianco^1^, Antonia Vieira Zanella^3^, François Bérubé^4^, Paola Faddoul^4^, Kelly Vu^4^, Étienne Perreault-Mandeville^5^, Patrick Boivin^6^, Danielle Dagenais^6^, Nathalie Boucher^5^, Thi Thanh Hiên Pham^4^, Carly D. Ziter^1^

1 Department of Biology, Concordia University, Montreal Canada, H4B 1R6

2 Tree Canada

3 Department of Geography, Federal University of Paraná, Paraná Brazil,

4 Département d'études urbaines et touristiques, Université du Québec à Montréal, Montreal Canada,

5 Organisme Respire

6 École d'urbanisme et d'architecture de paysage, Université de Montréal, Montreal Canada

\* isabella.richmond\@mail.concordia.ca

```{r}
#| echo: false
#| eval: true
#| warning: false
#| message: false
#| label: setup

source('R/packages.R')

plot_prior <- function(mod, xmin, xmax, ylab){
  
  # how to sequence data
  seq_d <- seq(xmin, xmax, by = 0.5)
  
  # pull variables from model 
  vars <- colnames(mod$data)[-1]
  
  # identify categorical variables 
  factors <- names(Filter(is.factor,mod$data[-1]))
  
  # identify numeric variables 
  numeric <- names(Filter(is.numeric,mod$data[-1]))
  
  figlist <- lapply(numeric, function(x){
    
    df <- data.frame(matrix(ncol=length(vars),nrow=0, dimnames=list(NULL, vars)))
    
    df %<>%
      summarise_at(x, ~seq_d) %>%
      bind_rows(df, .) %>%
      mutate(across(all_of(factors), as.factor)) %>% 
      mutate(across(all_of(numeric), ~ replace(., is.na(.), 0)))
    
    epred <- add_epred_draws(df, mod)
    
    ggplot(epred, aes(x = get(x), y = .epred)) +
      geom_line(aes(group = .draw), alpha = 0.1) +
      labs(y = ylab, x = x) +
      theme_classic()
    
  })
}


plot_model_1 <- function(model){
    
    # basic model fit plots
    b <- mcmc_trace(model)
  
    # Gelman plot
    ac <- as_draws_df(model) %>% 
      mutate(chain = .chain) %>% 
      mcmc_acf(pars = vars(b_Intercept), lags = 35)
    
    b / ac + 
      plot_layout(ncol = 1) 
}

plot_model_2 <- function(model){
    # rhat values
    rhats <- brms::rhat(model)
    rh <- mcmc_rhat(rhats)
    
    # neff 
    ratios_cp <- neff_ratio(model)
    neff <- mcmc_neff(ratios_cp, size = 2)
    
    # posterior check
    pp <- pp_check(model, ndraws = 100)
    
   
   rh / neff / pp + 
      plot_layout(ncol = 1) 


  }


```




## Tables 

Table S1. Site characteristics. Infrastructure ID is the unique ID assigned to each individual site, where CON indicates a grey alley, RV indicates a green alley, and SS indicates a street segment. Parallel street names one of the parallel streets to each alley, and for street segments it indicates the street segment that was sampled for each alley. City is where the sampling occurred, VSMPE = Villeray-Saint Michel-Parc Extension and TR = Trois-Rivières. Infrastructure type indicates the site type, with three potential options, green alley, grey alley, and street segment. Percent canopy indicates the percent canopy of the site in decimal form. Firefly presence is a binomial variable, where 1 indicates that fireflies were found, 0 indicates no fireflies were found, and a blank indicates that the site was not sampled for fireflies. Number of points is the number of points where vegetative complexity was sampled (i.e., number of 10 m intervals).

```{r}
#| echo: false
#| eval: true
#| warning: false
#| message: false
#| label: table-s1

tar_load(ecological_benefits)

strts <- read.csv('input/parallel-streets.csv', encoding = 'UTF-8') %>% 
  mutate(street_segments = str_replace_all(InfrastructureID, c('CON-TR' = 'CON-SS-TR', 'CON-VSMPE' = 'CON-SS-VSMPE', 'RV-TR' ='RV-SS-TR', 'RV-VSMPE' = 'SS-VSMPE'))) %>% 
  pivot_longer(cols = c(InfrastructureID, street_segments), values_to = 'InfrastructureID') %>% 
  select(-name)



ecological_benefits %>% 
  inner_join(., strts) %>%
  select(c(InfrastructureID, parallel_street, city, type, per_can, firefly_presence, npoints)) %>% 
  mutate(type = case_when(type == 'Segments des Rues' ~ 'street segment',
                          type == 'Ruelles Vertes' ~ 'green alley',
                          type == 'Ruelles Traditionelles' ~ 'grey alley'),
         city = case_when(city == 'Villeray-Saint Michel-Parc Extension' ~ 'VSMPE',
                          city == 'Trois-Rivières' ~ 'TR')) %>% 
  st_drop_geometry() %>% 
  flextable() %>% 
  set_header_labels(
    InfrastructureID = "Infrastructure ID",
    parallel_street = "Parallel Street",
    city = "City",
    type = "Infrastructure Type",
    per_can = "Percent Canopy",
    firefly_presence = "Firefly Presence",
    npoints = "Number of Points"
  ) %>% 
  colformat_double(j = 'per_can', digits=2) %>% 
  set_table_properties(
  opts_html = list(
    scroll = list(
      height = "500px",
      freeze_first_column = TRUE
    )
  )
)


```



Table S2. Tree species characteristics for species found in this study. Species represents binomial nomenclature for the species, max height represents the maximum height (in metres) for the species, flowers indicate if the species has showy or non-showy flowers when in bloom, native is a binomial category that indicates if the species is native to the St Lawrence Lowlands ecoregion (1 = yes, 0 = no), invasive is a binomial category that indicates if the species is invasive to the region (1 = yes, 0 = no), functional group represents the functional group assigned by Paquette et al. for that species (Paquette et al., 2021, Praise for diversity: A functional approach to reduce risks in urban forests). Blank cells indicate that we could not find the information for that species. 

```{r}
#| echo: false
#| eval: true
#| warning: false
#| message: false
#| label: table-s2

tar_load(tree_traits)

tree_traits %>% 
  select(-c(X, X., Native_ETF)) %>% 
  flextable() %>% 
  set_header_labels(
    latin.name = "Species",
    maximum.height = "Max Height (m)",
    flowering = "Flowers",
    native_SLL = "Native",
    Invasive = "Invasive",
    FunctionalGroup = "Functional Group"
  ) %>% 
  set_table_properties(
  opts_html = list(
    scroll = list(
      height = "500px",
      freeze_first_column = TRUE
    )))



```




Table S3. Interview data 

```{r}
#| echo: false
#| eval: true
#| warning: false
#| message: false
#| label: table-s3





```


## Figures 


![](mtl_dags_eb.png)
Figure S1a. DAGs that indicate the system assumptions for ecological benefits measured in this study. Blue indicates the response variable of interest, green indicates the variable of interest and all variables adjusted for. 

![](mtl_dags_es.png)
Figure S1b. DAGs that indicate the system assumptions for ecosystem services measured in this study. Blue indicates the response variable of interest, green indicates the variable of interest and all variables adjusted for. 



Figure S2. Mathstats notation for my models 




# Prior Predictive Checks 

Prior predictive checks are used to ensure that the values selected for priors for our models allow a biologically reasonable range of values. For numeric predictor variables, we simulate predictive draws for prior only models and visualize the slope/intercept of the values. We then do a "posterior predictive check" but with the prior only model, to see if the data is captured in the priors. Note that all data is scaled and centered in these data.

For Trois-Rivieres, there is only a categorical predictor variable. Therefore, only the posterior predictive check is presented.

```{r}
#| echo: false
#| eval: true
#| warning: false
#| message: false
#| label: prior-setup


tar_load(prior_model_list)

vsmpe <- prior_model_list[grepl("vsmpe", names(prior_model_list))] %>% 
  setNames(., c('Canopy Cover', 'Firefly Abundance', 'Species Richness', 'Functional Diversity', 'Vertical Complexity', 
                'Percent Native', 'Percent Invasive', 'Temperature', 'Tree Abundance', 'Tree Size (DBH)', 'Tree Height', 'Percent Flowery'))
tr <- prior_model_list[grepl("tr", names(prior_model_list))] %>% 
  setNames(., c('Canopy Cover', 'Species Richness', 'Functional Diversity', 'Vertical Complexity', 
                'Percent Native', 'Percent Invasive', 'Temperature', 'Tree Abundance', 'Tree Size (DBH)', 'Tree Height', 'Percent Flowery'))

```


## Villeray-Saint Michel-Parc Extension
```{r}
#| echo: false
#| eval: true
#| warning: false
#| message: false
#| column: screen
#| out-width: 100%
#| label: prior-plots-vsmpe


invisible(capture.output(lapply(seq_along(vsmpe), function(x){
  
  figs <- plot_prior(vsmpe[[x]], -3, 3, paste(names(vsmpe[x])))
  
  wrap_plots(figs, nrow = 2, ncol = 2) / pp_check(vsmpe[[x]], ndraws = 100) + 
    plot_layout(nrow = 2) + 
    plot_annotation(title = print(names(vsmpe[x])))
  
})))
```

## Trois-Rivieres
```{r}
#| echo: false
#| eval: true
#| warning: false
#| message: false
#| column: screen
#| out-width: 100%
#| label: prior-plots-tr


invisible(capture.output(lapply(seq_along(tr), function(x){
  
  pp_check(tr[[x]], ndraws = 100) + 
    plot_annotation(title = print(names(tr[x])))
  
})))

```


# Model Diagnostics 

These model diagnostic plots assess whether the chains of our models are converged and well mixed, and if the model is well specified and has an adequate fit.

The first plot of the series shows trace plots for each of our parameters, where we want to see stationary and well-mixed chains. The second plot shows an autocorrelation plot by chain and parameter. We want our autocorrelation to quickly drop to zero with increasing lag. Thirdly, the Rhat plot monitors whether a chain has converged to the equilibrium distribution, if all chains are at equilibrium Rhat will be one. If chains have not converged, Rhat will be greater than 1. The fourth plot is the ratio between effective sample size (Neff) and total sample size (N).Because the draws within a Markov chain are not independent if there is autocorrelation, the effective sample size, neff, is usually smaller than the total sample size, N. The larger the ratio, the better. Finally, we have the posterior predictive check where we want the black line to be within/close to the blue lines, to indicate that our model is adequately generative.


```{r}
#| echo: false
#| eval: true
#| warning: false
#| message: false
#| label: diagnostics-setup


tar_load(model_list)

vsmpe <- model_list[grepl("vsmpe", names(model_list))] %>% 
  setNames(., c('Canopy Cover', 'Firefly Abundance', 'Species Richness', 'Functional Diversity', 'Vertical Complexity', 
                'Percent Native', 'Percent Invasive', 'Temperature', 'Tree Abundance', 'Tree Size (DBH)', 'Tree Height', 'Percent Flowery'))

tr <- model_list[grepl("tr", names(model_list))] %>% 
  setNames(., c('Canopy Cover', 'Species Richness', 'Functional Diversity', 'Vertical Complexity', 
                'Percent Native', 'Percent Invasive', 'Temperature', 'Tree Abundance', 'Tree Size (DBH)', 'Tree Height', 'Percent Flowery'))


```



## Villeray-Saint Michel-Parc Extension
```{r}
#| echo: false
#| eval: true
#| warning: false
#| message: false
#| column: screen
#| out-width: 100%
#| label: diagnostic-plots-vsmpe


invisible(capture.output(lapply(seq_along(vsmpe), function(x){
  
  plot_model_1(vsmpe[[x]]) + 
    plot_annotation(title = print(names(vsmpe[x])))
  
  plot_model_2(vsmpe[[x]])
  
  
  
})))
```

## Trois-Rivieres
```{r}
#| echo: false
#| eval: true
#| warning: false
#| message: false
#| column: screen
#| out-width: 100%
#| label: diagnostic-plots-tr

invisible(capture.output(lapply(seq_along(tr), function(x){
  
  plot_model_1(tr[[x]]) + 
    plot_annotation(title = print(names(tr[x])))
  
  plot_model_2(tr[[x]])
  
  
  
})))

```